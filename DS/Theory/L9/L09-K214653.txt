// Task 1: 
#include <iostream>

using namespace std;

class Node {
public:
	int data;
	Node* left;
	Node* right;

	Node() {
		data = 0;
		left = NULL;
		right = NULL;
	}
	
	Node(int d) {
		data = d;
		left = NULL;
		right = NULL;
	}
};

class BST {
public:
	Node* addnode(int data) {
		Node* newnode = new Node(data);
		return newnode;
	}
	
	// AutoGrader function
	int autoGrader(Node* root) {
		if (root == NULL) {
			return 1;
		}
		if (root->left != NULL && root->left->data > root->data) {
			return 0;
		}
		if (root->right != NULL && root->right->data < root->data) {
			return 0;
		}
		if (autoGrader(root->left) == 0 || autoGrader(root->right) == 0) {
			return 0;
		}
		return 10;
	}

	// Display function
	void display(Node* root) {
		if (root == NULL) {
			return;
		}
		display(root->left);
		cout << root->data << " ";
		display(root->right);
	}

};


int main() {
	BST b;
	Node* root = NULL;

	cout << "Tree 1: ";
	root = b.addnode(10);
	root->left = b.addnode(9);
	root->right = b.addnode(15);
	root->left->left = b.addnode(10);
	root->left->right = b.addnode(8);
	root->right->left = b.addnode(12);
	root->right->right = b.addnode(2); 
	b.display(root);
	cout << "\nMarks: " << endl;
	cout << b.autoGrader(root) << endl;

	BST b1;
	Node* root1 = NULL;
	
	cout << "Tree 2: ";
	root1 = b1.addnode(40);
	root1->left = b1.addnode(30);
	root1->right = b1.addnode(50);
	root1->left->left = b1.addnode(20);
	root1->left->right = b1.addnode(35);
	root1->right->left = b1.addnode(45);
	root1->right->right = b1.addnode(60);
	
	b.display(root1);
	cout << "\nMarks: " << endl;
	cout << b1.autoGrader(root1) << endl;
}

// Task 2 and 3 :

#include <iostream>
#include <stack>

using namespace std;

class Node {
public:
	int data;
	Node* left;
	Node* right;

	Node() {
		data = 0;
		left = NULL;
		right = NULL;
	}

	Node(int d) {
		data = d;
		left = NULL;
		right = NULL;
	}
};

class BST {
public:
	Node* addnode(int data) {
		Node* newnode = new Node(data);
		return newnode;
	}

	Node* insert(Node* root, int data) {
		if (root == NULL) {
			root = addnode(data);
		}
		else if (data <= root->data) {
			root->left = insert(root->left, data);
		}
		else {
			root->right = insert(root->right, data);
		}
		return root;
	}

	void inorder(Node* root) {
		if (root == NULL) {
			return;
		}
		inorder(root->left);
		cout << root->data << " ";
		inorder(root->right);
	}

	void preorder(Node* root) {
		if (root == NULL) {
			return;
		}
		cout << root->data << " ";
		preorder(root->left);
		preorder(root->right);
	}

	// preorder iterative function
	void preorder_iterative(Node* root) {
		if (root == NULL) {
			return;
		}
		stack<Node*> s; // Creating a Stack of type Node
		s.push(root); // Pushing the root node into the stack
		while (!s.empty()) { // While the stack is not empty
			Node* temp = s.top(); // Creating a temporary node and assigning it the top of the stack (root)
			cout << temp->data << " "; // Printing the data of the root node
			s.pop(); 
			if (temp->right != NULL) { // If the right child of the root node is not NULL
				s.push(temp->right); // Push the right child of the root node into the stack
			}
			if (temp->left != NULL) { // If the left child of the root node is not NULL
				s.push(temp->left); // Push the left child of the root node into the stack
			}
		} 
	}
};

int main() {

	BST tree;
	Node* root = NULL;
	
	int arr[] = { 15, 10, 20, 8, 12, 16, 25 };
	int size = sizeof(arr) / sizeof(arr[0]);
	
	for (int i = 0; i < size; i++) {
		root = tree.insert(root, arr[i]);
	}

	cout << "Inorder: ";
	tree.inorder(root);
	
	cout << endl << "Preorder: ";
	tree.preorder(root);

	cout << endl << "Preorder Iterative: ";
	tree.preorder_iterative(root);
}

// Task 4:

#include <iostream>

using namespace std;

// Given a BST and a range of keys(values), remove nodes from BST that have keys outside the given range

class Node
{
public:
	int data;
	Node* left;
	Node* right;

	Node()
	{
		data = 0;
		left = NULL;
		right = NULL;
	}
	Node(int d)
	{
		data = d;
		left = NULL;
		right = NULL;
	}
};

class BST
{
public:
	Node* addNode(int data)
	{
		Node* newNode = new Node(data);
		return newNode;
	}

	Node* insert(Node* root, int data)
	{
		if (root == NULL)
		{
			root = addNode(data);
		}
		else if (data <= root->data)
		{
			root->left = insert(root->left, data);
		}
		else
		{
			root->right = insert(root->right, data);
		}
		return root;
	}

	void inorder(Node* root)
	{
		if (root == NULL)
		{
			return;
		}
		inorder(root->left);
		cout << root->data << " ";
		inorder(root->right);
	}

	Node* removeOutsideRange(Node* root, int min, int max)
	{
		if (root == NULL)
		{
			return NULL;
		}
		root->left = removeOutsideRange(root->left, min, max);
		root->right = removeOutsideRange(root->right, min, max);

		if (root->data < min)
		{
			Node* rChild = root->right;
			delete root;
			return rChild;
		}
		if (root->data > max)
		{
			Node* lChild = root->left;
			delete root;
			return lChild;
		}
		return root;
	}

	
	
};

int main() {
	
	BST b;
	
	Node* root = NULL;
	
	root = b.insert(root, 15);
	root = b.insert(root, 10);
	root = b.insert(root, 20);
	root = b.insert(root, 8);
	root = b.insert(root, 12);
	root = b.insert(root, 16);
	root = b.insert(root, 25);
	
	b.inorder(root);
	
	cout << endl << "Remove: ";

	root = b.removeOutsideRange(root, 9, 12);
	
	b.inorder(root);

	return 0;
}