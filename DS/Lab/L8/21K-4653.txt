// Task 1

#include <iostream>

using namespace std;

// Create a stack in an array

class Stack {
private:
	int top;
	int size;
	int* S;
	
public:
	Stack(int size);
	~Stack();
	bool push(int x);
	int pop();
	void peek();
	bool isEmpty();
	void Display();
};

Stack::Stack(int size) {
	top = -1;
	this->size = size;
	S = new int[size];
}

Stack::~Stack() {
	delete[] S;
}

bool Stack::push(int x) {
	if (top == size - 1) {
		cout << "Stack Overflow" << endl;
		return false;
	}
	else {
		top++;
		S[top] = x;
		cout << x << " pushed into stack\n";
		return true;
	}
}

int Stack::pop() {
	int x = -1;
	if (top == -1) {
		cout << "Stack Underflow" << endl;
	}
	else {
		x = S[top--];
	}
	return x;
}

void Stack::peek() {
	if (top == -1) {
		cout << "Stack is empty" << endl;
	}
	else {
		cout << S[top] << " is at the top of the stack" << endl;
	}
}

bool Stack::isEmpty() {
	if (top == -1) {
		return true;
	}
	else {
		return false;
	}
}

void Stack::Display() {
	for (int i = top; i >= 0; i--) {
		cout << S[i] << " ";
	}
	cout << endl;
}

int main() {
	Stack stk(10);
	if (stk.isEmpty()) 
		cout << "Stack is empty" << endl;
	else
		cout << "Stack is not empty" << endl;
	
	for (int i = 1; i <= 10; i++) {
		stk.push(i);
	}
	stk.pop();
	stk.Display();
	stk.peek();
}

// Task 2

#include <iostream>

using namespace std;

// Stack in Linked list

class Node {
public:
	int data;
	Node* next;

	Node(int data) {
		this->data = data;
		next = NULL;
	}
};

class Stack {
public:
	Node* head;
	int size;
	
	Stack() {
		head = NULL;
		size = 0;
	}

	int getSize() {
		return size;
	}

	bool isEmpty() {
		return size == 0;
	}

	void push(int element) {
		Node* newNode = new Node(element);
		newNode->next = head;
		head = newNode;
		size++;
	}

	void pop() {
		if (isEmpty()) {
			cout << "Stack is empty" << endl;
			return;
		}
		int data = head->data;
		Node* temp = head;
		head = head->next;
		cout << data << " is popped" << endl;
		delete temp;
		size--;
	}

	int top() {
		if (isEmpty()) {
			cout << "Stack is empty" << endl;
			return 0;
		}
		return head->data;
	}

	// forward traversing
	void print() {
		Node* temp = head;
		while (temp != NULL) {
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << endl;
	}

	// reverse traversing
	void printReverse(Node* head) {
		if (head == NULL) {
			return;
		}
		printReverse(head->next);
		cout << head->data << " ";
	}
};

int main() {
	Stack stk;

	stk.push(2);
	stk.push(3);
	stk.push(4);
	stk.push(5);
	stk.push(6);
	stk.push(7);

	stk.print();
	stk.printReverse(stk.head);

	cout << endl;
	cout << "Top: " << stk.top() << endl;
	stk.pop();

}


// Task 3

#include <iostream>
using namespace std;

// Infix to Postfix using stack 

class Stack
{
private:
	int top;
	int size;
	char* S;

public:
	Stack(int size)
	{
		this->size = size;
		top = -1;
		S = new char[size];
	}
	~Stack()
	{
		delete[]S;
	}
	void push(char x)
	{
		if (top == size - 1)
			cout << "Stack Overflow" << endl;
		else
		{
			top++;
			S[top] = x;
		}
	}
	char pop()
	{
		char x = -1;
		if (top == -1)
			cout << "Stack Underflow" << endl;
		else
		{
			x = S[top];
			top--;
		}
		return x;
	}
	char peek(int index)
	{
		char x = -1;
		if (top - index + 1 < 0)
			cout << "Invalid Index" << endl;
		else
			x = S[top - index + 1];
		return x;
	}
	int isEmpty()
	{
		if (top == -1)
			return 1;
		return 0;
	}
	int isFull()
	{
		return top == size - 1;
	}
	char stackTop()
	{
		if (!isEmpty())
			return S[top];
		return -1;
	}
};

int inPre(char x)
{
	if (x == '^')
		return 3;
	else if (x == '*' || x == '/')
		return 2;
	else if (x == '+' || x == '-')
		return 1;
	return 0;
}

void InfixToPostfix(string infix)
{
	Stack stk(infix.length());
	string postfix;
	for (int i = 0; i < infix.length(); i++)
	{
		if (infix[i] >= 'a' && infix[i] <= 'z' || infix[i] >= 'A' && infix[i] <= 'Z')
			postfix += infix[i];
		else if (infix[i] == '(')
			stk.push(infix[i]);
		else if (infix[i] == ')')
		{
			for (int j = stk.stackTop(); j != '('; j = stk.stackTop())
				postfix += stk.pop();
			stk.pop();
		}
		else
		{
			for (int j = stk.stackTop(); inPre(j) >= inPre(infix[i]); j = stk.stackTop())
				postfix += stk.pop();
			stk.push(infix[i]);
		}
	}
	for (int i = stk.stackTop(); i != -1; i = stk.stackTop())
		postfix += stk.pop();
	cout << postfix << endl;
}

int main()
{
	string exp = "a+b*(c^d-e)^(f+g*h)-i";
	InfixToPostfix(exp);
	return 0;
}



// Task 4

#include <iostream>

using namespace std;

// Array Based Queues

class Queue {
private:
	int* arr;
	int front;
	int rear;
	int size;
	
public:
	Queue(int size) {
		this->size = size;
		front = -1;
		rear = -1;
		arr = new int[size];
	}

	void enqueue(int data) {
		if (rear == size - 1) {
			cout << "Queue is full" << endl;
		}
		else {
			rear++;
			arr[rear] = data;
			if (front == -1) {
				front = 0;
			}
		}
	}

	int dequeue() {
		int data = 0;
		if (front == -1 || front > rear) {
			cout << "Queue is empty" << endl;
		}
		else {
			data = arr[front];
			front++;
		}
		return data;
	}

	int peek() {
		int data = 0;
		if (front == -1 || front > rear) {
			cout << "Queue is empty" << endl;
		}
		else {
			data = arr[front];
		}
		return data;
	}

	bool isEmpty() {
		return (front == -1 || front > rear);
	}

	bool isFull() {
		return (rear == size - 1);
	}

	void display() {
		if (front == -1 || front > rear) {
			cout << "Queue is empty" << endl;
		}
		else {
			for (int i = front; i <= rear; i++) {
				cout << arr[i] << " ";
			}
			cout << endl;
		}
	}
};

int main() {
	Queue q(5);
	if (q.isEmpty())
		cout << "Queue is empty" << endl;
	else
		cout << "Queue is not empty" << endl;
	
	
	q.enqueue(1);
	q.enqueue(2);
	q.enqueue(3);
	q.enqueue(4);
	q.enqueue(5);
	q.display();
	q.dequeue();
	q.display();
	q.enqueue(6);
	q.display();

	return 0;
}

// Task 5

#include <iostream>

using namespace std;

// Linked list based queues

class Node {
public:
	int data;
	Node* next;
	
	Node() {
		data = 0;
		next = NULL;
	}
	Node(int d) {
		data = d;
		next = NULL;
	}
};


class Queue {
private:
	int size;
	int capacity;
	Node* front;
	Node* rear;
public:
	Queue() {
		size = 0;
		capacity = 0;
		front = NULL;
		rear = NULL;
	}
	Queue(int c) {
		size = 0;
		capacity = c;
		front = NULL;
		rear = NULL;
	}

	void enqueue(int d) {
		if (size == capacity) {
			cout << "Queue is full" << endl;
			return;
		}
		Node* newNode = new Node(d);
		if (size == 0) {
			front = newNode;
			rear = newNode;
		}
		else {
			rear->next = newNode;
			rear = newNode;
		}
		size++;
	}

	int dequeue() {
		if (size == 0) {
			cout << "Queue is empty" << endl;
			return -1;
		}
		int d = front->data;
		Node* temp = front;
		front = front->next;
		delete temp;
		size--;
		return d;
	}

	bool isEmpty() {
		return size == 0;
	}

	bool isFull() {
		return size == capacity;
	}

	void print() {
		Node* temp = front;
		while (temp != NULL) {
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << endl;
	}
};

int main() {
	Queue q(5);
	
	if(q.isEmpty())
		cout << "Queue is empty" << endl;
	else
		cout << "Queue is not empty" << endl;
	q.enqueue(1);
	q.enqueue(2);
	q.enqueue(3);
	q.enqueue(4);
	q.enqueue(5);
	q.print();

	if (q.isFull())
		cout << "Queue is full" << endl;
	else
		cout << "Queue is not full" << endl;
	
	q.dequeue();
	q.dequeue();
	q.print();
	q.enqueue(6);
	q.enqueue(7);
	q.print();
	return 0;
}


// Task 6

#include <iostream>

using namespace std;

// Implement the Elementary implementation of Priority queue using linked list as explain in Figure “Sequence of Operation in Priority Queue”.

class Node {
public:
	int data;
	int priority;
	Node* next;
	
	Node() {
		data = 0;
		priority = 0;
		next = NULL;
	}

	Node(int d, int p) {
		data = d;
		priority = p;
		next = NULL;
	}
};

class PriorityQueue {
private:
	Node* front;
	Node* rear;
public:
	PriorityQueue() {
		front = NULL;
		rear = NULL;
	}

	void enqueue(int d, int p) {
		Node* newNode = new Node(d, p);
		if (front == NULL) {
			front = newNode;
			rear = newNode;
		}
		else {
			Node* temp = front;
			while (temp->next != NULL && temp->next->priority < p) {
				temp = temp->next;
			}
			newNode->next = temp->next;
			temp->next = newNode;
		}
	}

	void dequeue() {
		if (front == NULL) {
			cout << "Queue is empty" << endl;
		}
		else {
			Node* temp = front;
			front = front->next;
			delete temp;
		}
	}

	void display() {
		if (front == NULL) {
			cout << "Queue is empty" << endl;
		}
		else {
			Node* temp = front;
			while (temp != NULL) {
				cout << temp->data << " ";
				temp = temp->next;
			}
			cout << endl;
		}
	}
};

int main() {
	PriorityQueue q;
	q.enqueue(1, 1);
	q.enqueue(2, 2);
	q.enqueue(3, 3);
	q.enqueue(4, 1);
	q.enqueue(5, 5);
	q.display();
	q.dequeue();
	q.display();
	q.dequeue();
	q.display();
	return 0;
}