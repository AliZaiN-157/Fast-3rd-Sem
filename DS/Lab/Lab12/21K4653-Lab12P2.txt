// Q1
#include <iostream>
#include <vector>

using namespace std;

// Prims Algorithm with char nodes

class Graph {
private:
	vector<vector<int>> adjMatrix;
	vector<char> nodes;
	int size;
public:
	Graph(int size) {
		this->size = size;
		adjMatrix.resize(size);
		for (int i = 0; i < size; i++) {
			adjMatrix[i].resize(size);
		}
	}

	void addEdge(char node1, char node2, int weight) {
		int index1 = findNode(node1);
		int index2 = findNode(node2);
		adjMatrix[index1][index2] = weight;
		adjMatrix[index2][index1] = weight;
	}

	void addNode(char node) {
		nodes.push_back(node);
	}

	int findNode(char node) {
		for (int i = 0; i < nodes.size(); i++) {
			if (nodes[i] == node) {
				return i;
			}
		}
		return -1;
	}

	void printMatrix() {
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				cout << adjMatrix[i][j] << " ";
			}
			cout << endl;
		}
	}

	void printNodes() {
		for (int i = 0; i < nodes.size(); i++) {
			cout << nodes[i] << " ";
		}
		cout << endl;
	}

	void prims() {
		vector<int> key(size, INT_MAX);
		vector<int> parent(size, -1);
		vector<bool> inMST(size, false);
		key[0] = 0;
		for (int i = 0; i < size - 1; i++) {
			int min = INT_MAX;
			int minIndex;
			for (int j = 0; j < size; j++) {
				if (inMST[j] == false && key[j] < min) {
					min = key[j];
					minIndex = j;
				}
			}
			inMST[minIndex] = true;
			for (int j = 0; j < size; j++) {
				if (adjMatrix[minIndex][j] != 0 && inMST[j] == false && adjMatrix[minIndex][j] < key[j]) {
					parent[j] = minIndex;
					key[j] = adjMatrix[minIndex][j];
				}
			}
		}
		for (int i = 1; i < size; i++) {
			cout << nodes[parent[i]] << " - " << nodes[i] << endl;
		}

	}

};

int main() {
	Graph g(7);
	g.addNode('A');
	g.addNode('B');
	g.addNode('C');
	g.addNode('D');
	g.addNode('E');
	g.addNode('F');
	g.addNode('G');
	g.addEdge('A', 'B', 1);
	g.addEdge('A', 'C', 5);
	g.addEdge('B', 'C', 4);
	g.addEdge('B', 'D', 8);
	g.addEdge('B', 'E', 7);
	g.addEdge('C', 'F', 2);
	g.addEdge('C', 'D', 6);
	g.addEdge('D', 'E', 11);
	g.addEdge('D', 'F', 9);
	g.addEdge('E', 'F', 3);
	g.addEdge('E', 'G', 10);
	g.addEdge('F', 'G', 12);
	g.prims();

	
}

// Q2
#include <iostream>
#include <list>
#include <vector>
#include <algorithm>

using namespace std;

// Kruskal's algorithm 

class Edge {
public:
	int u, v, w; // u and v are the vertices, w is the weight
	Edge(int u, int v, int w) : u(u), v(v), w(w) {}
};

class Graph {
public:
	int n;
	vector<Edge> edges;
	Graph(int n) : n(n) {}
	void addEdge(int u, int v, int w) {
		edges.push_back(Edge(u, v, w));
	}
};

class DisjointSet {
public:
	int n;
	vector<int> parent;
	DisjointSet(int n) : n(n) {
		parent.resize(n);
		for (int i = 0; i < n; i++)
			parent[i] = i;
	}
	int find(int u) {
		if (u == parent[u])
			return u;
		return parent[u] = find(parent[u]);
	}
	void merge(int u, int v) {
		u = find(u);
		v = find(v);
		if (u == v)
			return;
		parent[u] = v;
	}
};

int main() {
	int n, m;
	cin >> n >> m;
	Graph g(n);
	for (int i = 0; i < m; i++) {
		int u, v, w;
		cin >> u >> v >> w;
		g.addEdge(u, v, w);
	}
	DisjointSet ds(n);
	sort(g.edges.begin(), g.edges.end(), [](Edge& e1, Edge& e2) {
		return e1.w < e2.w;
		});
	int totalWeight = 0;
	for (Edge& e : g.edges) {
		if (ds.find(e.u) != ds.find(e.v)) {
			ds.merge(e.u, e.v);
			totalWeight += e.w;
		}
	}
	cout << totalWeight << endl;
	return 0;
}

// inputs
// 6 9
// 0 1 1
// 0 2 2
// 0 3 3
// 1 2 4
// 1 4 5
// 2 3 6
// 2 4 7
// 2 5 8
// 3 5 9

// output
// 21

// Q3

// Dijkstra algorithm for shortest path in a graph

#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

// Graph class
class Graph {
private:
	// Adjacency list
	unordered_map<int, vector<pair<int, int>>> adjList;
	// Number of vertices
	int numVertices;
public:
	// Constructor
	Graph(int numVertices) {
		this->numVertices = numVertices;
	}
	// Add edge
	void addEdge(int u, int v, int w) {
		adjList[u].push_back(make_pair(v, w));
	}
	// Dijkstra algorithm
	void dijkstra(int source) {
		// Distance vector
		vector<int> dist(numVertices, INT_MAX);
		// Set distance of source to 0
		dist[source] = 0;
		// Set to keep track of vertices included in shortest path tree
		unordered_set<int> sptSet;
		// Find shortest path for all vertices
		for (int count = 0; count < numVertices - 1; count++) {
			// Pick the minimum distance vertex from the set of vertices not yet processed
			int u = minDistance(dist, sptSet);
			// Add the picked vertex to the shortest path tree
			sptSet.insert(u);
			// Update dist value of the adjacent vertices of the picked vertex
			for (auto it = adjList[u].begin(); it != adjList[u].end(); it++) {
				int v = it->first;
				int weight = it->second;
				if (!sptSet.count(v) && dist[u] != INT_MAX && dist[u] + weight < dist[v])
					dist[v] = dist[u] + weight;
			}
		}
		// Print shortest distances stored in dist
		printSolution(dist);
	}
	// Find the vertex with minimum distance value, from the set of vertices not yet included in shortest path tree
	int minDistance(vector<int> dist, unordered_set<int> sptSet) {
		// Initialize min value
		int min = INT_MAX, minIndex;
		for (int v = 0; v < numVertices; v++)
			if (sptSet.count(v) == 0 && dist[v] <= min)
				min = dist[v], minIndex = v;
		return minIndex;
	}
	// Print the constructed distance array
	void printSolution(vector<int> dist) {
		cout << "Vertex Distance from Source" << endl;
		for (int i = 0; i < numVertices; i++)
			cout << i << " " << dist[i] << endl;
	}
};

int main() {
	// Create a graph
	Graph g(9);
	// Add edges
	g.addEdge(0, 1, 4);
	g.addEdge(0, 7, 8);
	g.addEdge(1, 2, 8);
	g.addEdge(1, 7, 11);
	g.addEdge(2, 3, 7);
	g.addEdge(2, 8, 2);
	g.addEdge(2, 5, 4);
	g.addEdge(3, 4, 9);
	g.addEdge(3, 5, 14);
	g.addEdge(4, 5, 10);
	g.addEdge(5, 6, 2);
	g.addEdge(6, 7, 1);
	g.addEdge(6, 8, 6);
	g.addEdge(7, 8, 7);
	// Run Dijkstra algorithm
	g.dijkstra(0);
	return 0;
}

// Q4

// Floyd Warshall Algorithm 

#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

// Function to print the shortest distance matrix
void printSolution(vector<vector<int>> dist, int V)
{
	cout << "The following matrix shows the shortest distances"
		" between every pair of vertices" << endl;
	for (int i = 0; i < V; i++)
	{
		for (int j = 0; j < V; j++)
		{
			if (dist[i][j] == 9999)
				cout << "INF" << " ";
			else
				cout << dist[i][j] << " ";
		}
		cout << endl;
	}
}

// Function to run Floyd Warshall Algorithm
void floydWarshall(vector<vector<int>> graph, int V)
{
	// dist[][] will be the output matrix that will finally
	// have the shortest distances between every pair of vertices
	vector<vector<int>> dist(V, vector<int>(V));

	// Initialize the solution matrix same as input graph matrix.
	// Or we can say the initial values of shortest distances
	// are based on shortest paths considering no intermediate
	// vertex.
	for (int i = 0; i < V; i++)
		for (int j = 0; j < V; j++)
			dist[i][j] = graph[i][j];

	// Add all vertices one by one to the set of intermediate
	// vertices.
	// ---> Before start of a iteration, we have shortest
	// distances between all pairs of vertices such that
	// the shortest distances consider only the vertices in
	// set {0, 1, 2, .. k-1} as intermediate vertices.
	// ----> After the end of a iteration, vertex no. k is
	// added to the set of intermediate vertices and the
	// set becomes {0, 1, 2, .. k}
	for (int k = 0; k < V; k++)
	{
		// Pick all vertices as source one by one
		for (int i = 0; i < V; i++)
		{
			// Pick all vertices as destination for the
			// above picked source
			for (int j = 0; j < V; j++)
			{
				// If vertex k is on the shortest path from
				// i to j, then update the value of dist[i][j]
				if (dist[i][k] + dist[k][j] < dist[i][j])
					dist[i][j] = dist[i][k] + dist[k][j];
			}
		}
	}

	// Print the shortest distance matrix
	printSolution(dist, V);
}

// Driver code

int main()
{
	// Number of vertices in the graph
	int V = 4;

	// Let us create the following weighted graph
	vector<vector<int>> graph = { { 0, 8, 9999, 1 },
								{ 9999, 0, 1, 9999 },
								{ 4, 9999, 0, 9999 },
								{ 9999, 2, 9, 0 }
								};

	// Print the solution
	floydWarshall(graph, V);
	return 0;
}
